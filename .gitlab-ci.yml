stages:
  - prepare
  - lint
  - build
  - tests
  - sentry
  - deploy

install-dependencies:
  stage: prepare
  image: drenso/php:7.3-d2
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}_cache"
    expire_in: 1 hour
    paths:
      - assets/js/_fos_js_routes.js
      - var/cache/
      - vendor/
      - .secrets.json
  before_script:
    - cp .secrets.json.dist .secrets.json
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then export HTTP_HOST="${STAGING_HOST}:${STAGING_HOST_PORT}"; fi # Fix for http-host used in fos-js routing
  script:
    - composer install --no-interaction --no-progress --no-suggest
  after_script:
    - find vendor/ -name .git -type d -exec rm -rf {} \+
  tags:
    - docker

shellcheck:
  stage: lint
  image: koalaman/shellcheck-alpine:stable
  before_script:
    - shellcheck --version
  script:
    - find . -name "*.sh" -not -path "./vendor/*" -exec shellcheck {} +
  tags:
    - docker
  except:
    - master
    - production

php-analysis:
  stage: lint
  image:
    name: kickin/phan:1.2.8
    entrypoint: [ "" ]
  dependencies:
    - install-dependencies
  script:
    - php7 /opt/phan/phan -k tests/phan/config.php
  tags:
    - docker
  except:
    - master
    - production

js-analysis:
  stage: lint
  image:
    name: hyzual/jshint:latest
    entrypoint: [ "" ]
  dependencies: []
  before_script:
    - cp tests/jshint/.jshintignore .
  script:
    - /usr/bin/jshint src --verbose --config tests/jshint/config
  tags:
    - docker
  except:
    - master
    - production

ts-analysis:
  stage: lint
  image: drenso/tslint:5.18.0
  dependencies: []
  script:
    - tslint --project .
  tags:
    - docker
  except:
    - master
    - production

yaml-analysis:
  stage: lint
  image: kickin/yamllint:1.0.0
  dependencies: []
  # This needs to be removed once https://github.com/adrienverge/yamllint/issues/30 is fixed
  before_script:
    - "find src -type f -name *.yml -exec sed -ri 's/(_controller: )([a-zA-Z]+:[a-zA-Z\\/]+:[a-zA-Z]+)/\\1\\\"\\2\\\"/g' {} \\;"
    - "find config -type f -name *.yml -exec sed -ri 's/(_controller: )([a-zA-Z]+:[a-zA-Z\\/]+:[a-zA-Z]+)/\\1\\\"\\2\\\"/g' {} \\;"
  script:
    - yamllint -c tests/yamllint/config config
  tags:
    - docker
  except:
    - master
    - production

sass-analysis:
  stage: lint
  image: drenso/sasslint:1.12.1-d1
  dependencies: []
  script:
    - sass-lint -v -c tests/sass-lint/.sass-lint.yml
  tags:
    - docker
  except:
    - master
    - production

phpunit:
  stage: tests
  image:
    name: drenso/phpunit:8.4-d4
    entrypoint: [ "" ]
  dependencies:
    - install-dependencies
  before_script:
    - cp phpunit.xml.dist phpunit.xml
  script:
    - phpunit
  tags:
    - docker
  except:
    - master
    - production

action-security-check:
  stage: tests
  image: drenso/php:7.3-d2
  dependencies:
    - install-dependencies
  script:
    - php bin/console ltb:check:action-security
  tags:
    - docker
  except:
    - master
    - production

sentry-release-staging:
  stage: sentry
  image: getsentry/sentry-cli
  script:
    - sentry-cli releases new -p ${SENTRY_PROJECT} ${SENTRY_PROJECT}@${CI_COMMIT_SHA:0:8}
    - sentry-cli releases set-commits --commit "extern / ${SENTRY_PROJECT}@${CI_COMMIT_SHA}" ${SENTRY_PROJECT}@${CI_COMMIT_SHA:0:8}
  tags:
    - docker
  only:
    - master
  except:
    - schedules

sentry-release-production:
  stage: sentry
  image: getsentry/sentry-cli
  script:
    - sentry-cli releases finalize ${SENTRY_PROJECT}@${CI_COMMIT_SHA:0:8}
    - sentry-cli releases deploys ${SENTRY_PROJECT}@${CI_COMMIT_SHA:0:8} new --env prod
  tags:
    - docker
  only:
    - production
  except:
    - schedules

build-assets:
  stage: build
  image: node:10
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - node_modules
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}_assets"
    expire_in: 1 hour
    paths:
      - public/build
      - public/email
  before_script:
    - yarn install
  script:
    - yarn run encore production
  tags:
    - docker

deploy-staging:
  stage: deploy
  image: kickin/ssh:1.1.0
  dependencies:
    - build-assets
  before_script:
    - mkdir -p ~/.ssh
    - echo "${STAGING_HOST_SSH} ${STAGING_HOST_SSH_FINGERPRINT}" >> ~/.ssh/known_hosts
    - echo "[${STAGING_HOST_SSH}]:${STAGING_HOST_SSH_PORT} ${STAGING_HOST_SSH_FINGERPRINT}" >> ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${STAGING_HOST_SSH_PRIVATE_KEY}")
  script:
    - ssh -tt ${STAGING_USER}@${STAGING_HOST_SSH} -p ${STAGING_HOST_SSH_PORT} ${CI_PIPELINE_ID}
  environment:
    name: Staging
    url: https://${STAGING_HOST}
  tags:
    - docker-deploy
  only:
    - master

deploy-prod:
  stage: deploy
  image: kickin/ssh:1.1.0
  dependencies:
    - build-assets
  before_script:
    - mkdir -p ~/.ssh
    - echo "${JUMP_HOST} ${JUMP_HOST_SSH_FINGERPRINT}" >> ~/.ssh/known_hosts
    - echo "${PRODUCTION_HOST_SSH} ${PRODUCTION_HOST_SSH_FINGERPRINT}" >> ~/.ssh/known_hosts
    - echo "[${PRODUCTION_HOST_SSH}]:${PRODUCTION_HOST_SSH_PORT} ${PRODUCTION_HOST_SSH_FINGERPRINT}" >> ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${PRODUCTION_HOST_SSH_PRIVATE_KEY}")
    - ssh-add <(echo "${JUMP_HOST_SSH_PRIVATE_KEY}")
  script:
    - ssh -tt -J ${JUMP_USER}@${JUMP_HOST} ${PRODUCTION_USER}@${PRODUCTION_HOST_SSH} -p ${PRODUCTION_HOST_SSH_PORT} ${CI_PIPELINE_ID}
  environment:
    name: Production
    url: https://${PRODUCTION_HOST}
  tags:
    - docker-deploy
  only:
    - production
  except:
    - schedules
