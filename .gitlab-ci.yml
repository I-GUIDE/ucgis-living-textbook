stages:
  - prepare
  - static
  - build
  - tests
  - deploy

install-dependencies:
  stage: prepare
  image: drenso/php:7.1-d2
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}_cache"
    expire_in: 1 hour
    paths:
      - assets/js/_fos_js_routes.js
      - var/cache/
      - vendor/
  variables:
    DATABASE_URL: mysql://user:password@127.0.0.1:3306/db # Temp fix for ckeditor:install, needs to be updated with #69
  before_script:
    - ./install-composer.sh
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then export HTTP_HOST="living-textbook.drenso.nl:60130"; fi # Fix for http-host used in fos-js routing
  script:
    - php composer.phar install --no-interaction --no-progress --no-suggest
  after_script:
    - find vendor/ -name .git -type d -exec rm -rf {} \+
  tags:
    - docker

php-analysis:
  stage: static
  image:
    name: kickin/phan:0.12.2
    entrypoint: [ "" ]
  dependencies:
    - install-dependencies
  script:
    - php7 /opt/phan/phan -k tests/phan/config.php
  tags:
    - docker
  except:
    - master
    - production

js-analysis:
  stage: static
  image:
    name: hyzual/jshint:latest
    entrypoint: [ "" ]
  dependencies: []
  before_script:
    - cp tests/jshint/.jshintignore .
  script:
    - /usr/bin/jshint src --verbose --config tests/jshint/config
  tags:
    - docker
  except:
    - master
    - production

yaml-analysis:
  stage: static
  image: kickin/yamllint:1.0.0
  dependencies: []
  # This needs to be removed once https://github.com/adrienverge/yamllint/issues/30 is fixed
  before_script:
    - "find src -type f -name *.yml -exec sed -ri 's/(_controller: )([a-zA-Z]+:[a-zA-Z\\/]+:[a-zA-Z]+)/\\1\\\"\\2\\\"/g' {} \\;"
    - "find config -type f -name *.yml -exec sed -ri 's/(_controller: )([a-zA-Z]+:[a-zA-Z\\/]+:[a-zA-Z]+)/\\1\\\"\\2\\\"/g' {} \\;"
  script:
    - yamllint -c tests/yamllint/config config
  tags:
    - docker
  except:
    - master
    - production

sass-analysis:
  stage: static
  image: drenso/sasslint:1.12.1-d1
  dependencies: []
  before_script:
    - cp tests/sass-lint/.sass-lint.yml .
  script:
    - sass-lint assets/css
  tags:
    - docker
  except:
    - master
    - production

action-security-check:
  stage: tests
  image: drenso/php:7.1-d2
  dependencies:
    - install-dependencies
  variables:
    DATABASE_URL: mysql://user:password@127.0.0.1:3306/db # Temp fix for ckeditor:install, needs to be updated with #69
  before_script:
    - cp .env.dist .env
  script:
    - php bin/console ltb:check:action-security
  tags:
    - docker
  except:
    - master
    - production

build-assets:
  stage: build
  image: node:9.11
  dependencies:
    - install-dependencies
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}_assets"
    expire_in: 1 hour
    paths:
      - public/build
  before_script:
    - yarn install
  script:
    - yarn run encore production
  tags:
    - docker

deploy-staging:
  stage: deploy
  image: kickin/ssh:1.1.0
  dependencies:
    - build-assets
  before_script:
    - mkdir -p ~/.ssh
    - echo "[living-textbook.drenso.nl]:60003 $SSH_STAGING_HOST_KEY" > ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_STAGING_PRIVATE_KEY")
  script:
    - ssh -tt update@living-textbook.drenso.nl -p 60003 'cd /var/www/013-living-textbook && LC_TOKEN="'$PRIVATE_ACCESS_TOKEN'" LC_PIPELINE_ID="'$CI_PIPELINE_ID'" ./update/deploy'
  environment:
    name: Staging
    url: https://living-textbook.drenso.nl
  tags:
    - docker
  only:
    - master

deploy-prod:
  stage: deploy
  image: kickin/ssh:1.1.0
  dependencies:
    - build-assets
  before_script:
    - mkdir -p ~/.ssh
    - echo "linux367.utsp.utwente.nl $SSH_PROD_HOST_KEY" > ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PROD_PRIVATE_KEY")
  script:
    - ssh -tt x1002348@linux367.utsp.utwente.nl './013-living-textbook --no-forward "cd /opt/application/013-living-textbook && LC_TOKEN='"'$PRIVATE_ACCESS_TOKEN'"' LC_PIPELINE_ID='"'$CI_PIPELINE_ID'"' ./update/deploy"'
  environment:
    name: Production
    url: https://ltb.itc.utwente.nl
  tags:
    - docker
  only:
    - production
