# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  locale: 'en'

  database_password: '%env(string:key:database:json:file:resolve:SECRETS_FILE)%'

  env(COMMIT_HASH): '0'
  app_version: '%env(APP_VERSION)%'
  commit_hash: '%env(COMMIT_HASH)%'
  production_server: '%env(bool:PRODUCTION_SERVER)%'
  exception_receiver: '%env(EXCEPTION_RECEIVER)%'
  exception_sender: '%env(EXCEPTION_SENDER)%'

  sentry_release: '013-living-textbook@%commit_hash%'

  env(HTTP_SCHEMA): 'https'
  router.request_context.host: '%env(HTTP_HOST)%'
  router.request_context.scheme: '%env(HTTP_SCHEMA)%'

  oidc.well_known_url: '%env(OIDC_WELL_KNOWN)%'
  oidc.client_id: '%env(OIDC_CLIENT_ID)%'
  oidc.client_secret: '%env(string:key:oidc:json:file:resolve:SECRETS_FILE)%'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true    # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false     # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{ConceptPrint,Entity,Migrations,Tests}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Export\ExportService:
    lazy: true

  App\Export\Provider\:
    resource: '../src/Export/Provider'
    lazy: true

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  # Overwrite for JMS serializer to always use the identical names
  jms_serializer.naming_strategy:
    alias: App\Serializer\Metadata\PropertyMetadata\SerializedNameWithIdenticalPropertyNamingStrategy

  # Register this service explicitly, as it is not autowired
  Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter:
    alias: framework_extra_bundle.argument_name_convertor

  App\Analytics\AnalyticsService:
    lazy: true
    arguments:
      $projectDir: '%kernel.project_dir%'
      $cacheDir: '%kernel.cache_dir%'
      $isDebug: '%kernel.debug%'
      $host: '%env(HTTP_HOST)%'
      $pythonPath: '%env(PYTHON_PATH)%'

  App\Communication\SetFromSubscriber:
    arguments:
      $from: '%env(MAIL_FROM)%'

  App\Database\SoftDeletableSubscriber:
    tags:
      - { name: doctrine.event_subscriber, connection: default }

  App\Twig\HighlightExtension:
    tags:
      - { name: twig.extension }

  App\UrlUtils\UrlScanner:
    lazy: true

  Drenso\OidcBundle\OidcClient:
    arguments:
      $wellKnownUrl: '%oidc.well_known_url%'
      $clientId: '%oidc.client_id%'
      $clientSecret: '%oidc.client_secret%'

  Kickin\ExceptionHandlerBundle\Configuration\SymfonyMailerConfigurationInterface:
    alias: 'App\ExceptionHandler\ExceptionHandlerConfiguration'

  Sentry\Integration\IgnoreErrorsIntegration:
    arguments:
      $options:
        ignore_exceptions:
          - Symfony\Component\HttpKernel\Exception\NotFoundHttpException
          - Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
          - Symfony\Component\Security\Core\Exception\AccessDeniedException

  security.authentication.provider.oidc:
    class: Drenso\OidcBundle\Security\Authentication\Provider\OidcProvider
    arguments:
      - ''
      - '@security.user_checker'
      - '@security.token_storage'
      - '@logger'

  security.authentication.listener.oidc:
    class: Drenso\OidcBundle\Security\Firewall\OidcListener
    arguments:
      - '@security.token_storage'
      - '@security.authentication.manager'
      - '@security.authentication.session_strategy'
      - '@security.http_utils'
      - ''
      - ''
      - ''
      - { }
      - '@logger'
      - '@Drenso\OidcBundle\OidcClient'
